# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml

trigger:
- master

pool:
  vmImage: 'macOS-latest'

steps:
- script: |
    echo Hello, world!
    ls -l
  displayName: 'lets get started!'

- task: InstallAppleCertificate@2
  inputs:
    certSecureFile: 'test-dev.p12'
    certPwd: '$(appleCert)'
    keychain: 'temp'
- task: InstallAppleProvisioningProfile@1
  inputs:
    provisioningProfileLocation: 'secureFiles'
    provProfileSecureFile: 'test-dev.mobileprovision'

- task: Xcode@5
  inputs:
    signingOption: 'manual'
    signingIdentity: '$(APPLE_CERTIFICATE_SIGNING_IDENTITY)'
    provisioningProfileUuid: '$(APPLE_PROV_PROFILE_UUID)'


- script: |
    echo try install cordova...
    npm install -g cordova
    cordova --version
  displayName: 'Cordova Install'

- script: npm install -g ios-deploy
  displayName: 'ios-deploy'

- script: |
    gem which cocoapods
    gem install cocoapods
    gem which cocoapods
  displayName: 'CocoaPods install'

- script: cordova prepare
  displayName: 'Cordova Prepare'

- script: ls -l
  displayName: 'lists after prepare'

- script: cordova requirements
  displayName: 'Cordova Requirements'


- script: cordova build ios --debug --emulator --verbose
  displayName: 'Build iOS Emulator'

- script: cordova build ios --device --debug --verbose
  displayName: "Build iOS - Dev"

- script: ls -l
  displayName: 'lists build ios emu'





- script: |
    SIMULATOR=$(find ./platforms/ios/build/emulator -name *.app)
    APP=simulator.zip
    zip -r "$APP" "$SIMULATOR"
    ls -lh
    ls -lh ./platforms/ios/build/emulator
    cp "./$APP" $(Build.ArtifactStagingDirectory)/
  displayName: 'zip up app'

- task: CopyFiles@2
  inputs:
    sourceFolder: '$(Build.SourcesDirectory)/platforms/ios/build'
    contents: '/**.app*/*'
    targetFolder: '$(Build.ArtifactStagingDirectory)'

- script: |
    pwd
    echo $(Build.ArtifactStagingDirectory)
    echo $(Build.SourcesDirectory)
    ls -lh platforms/ios/build/emulator
    ls -lh '$(Build.ArtifactStagingDirectory)'
  displayName: 'wheres da files'

- task: PublishBuildArtifacts@1
  inputs:
    PathtoPublish: '$(Build.ArtifactStagingDirectory)'
    ArtifactName: 'drop'
    publishLocation: 'Container'
